#!/bin/sh
##############################################################
pkgbase="linux_tools"
vers="5.13"
url="https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-${vers}.tar.xz"
verify="https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-${vers}.tar.sign"
digest=""
arch=`uname -m`
build=B1
# Change here to the path of kernel source
src="/usr/src/linux-5.13.1"
#
OPT_CONFIG=""
DOCS=""
patchfiles=""
# specifies files that are not in source archive and patchfiles
addfiles=""
compress=txz
# tools to build
#tools="perf cpupower x86_energy_perf_policy usbip tmon cgroup_event_listener turbostat bpf"
#tools="perf cpupower x86_energy_perf_policy usbip tmon cgroup_event_listener turbostat"
tools="perf bpf"
##############################################################

source /usr/share/plamobuild_functions.sh

# このスクリプトで使う1文字変数の意味
#
# $W : このスクリプトを動かすカレントディレクトリ
# $S : ソースコードのあるディレクトリ(デフォルト: $W/${src})
# $B : ビルド用ディレクトリ(デフォルト: /tmp/build)
# $P : ビルドしたファイルをインストールするディレクトリ（デフォルト: $W/work)

if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
    download_sources
fi


if [ $opt_config -eq 1 ] ; then

    for f in $addfiles $patchfiles
    do
        if [ ! -f $f ]; then
            echo "Required file ($f) is missing."
            exit 255
        fi
    done

######################################################################
#  out of tree build. patch apply in src dir
######################################################################
    cd $src
    for patch in $patchfiles ; do
        if [ ! -f .${patch} ]; then
            patch -p1 < $W/$patch
            touch .${patch}
        fi
    done
fi

make_perf() {
    pushd $src/tools/perf
    LDFLAGS='-Wl,--as-needed' \
           make -f Makefile.perf \
           prefix=/usr \
           NO_SDT=1 \
           PYTHON=python \
           PYTHON_CONFIG=python-config \
           PERF_VERSION=$vers \
           DESTDIR=$P
    popd
}

make_cpupower() {
    pushd $src/tools/power/cpupower
    LDFLAGS='-Wl,--as-needed' \
           make VERSION=$vers
    popd
}

make_x86_energy_perf_policy() {
    pushd $src/tools/power/x86/x86_energy_perf_policy
    make
    popd
}

make_usbip() {
    pushd $src/tools/usb/usbip
    sed -i 's,-Wall -Werror -Wextra,-fcommon,' configure.ac
    ./autogen.sh
    ./configure --prefix=/usr
    make
    popd
}

make_tmon() {
    pushd $src/tools/thermal/tmon
    make
    popd
}

make_cgroup_event_listener() {
    pushd $src/tools/cgroup/
    make
    popd
}

make_turbostat() {
    pushd $src/tools/turbostat
    make
    popd
}

make_bpf() {
    pushd $src/tools/bpf
    make -C bpftool all doc
    make -W runqslower
    popd
}

if [ $opt_build -eq 1 ] ; then
    cd $src
    for tool in $tools
    do
        echo "==== $tool ===="
        case $tool in
            "perf")
                make_perf
                ;;
            "cpupower")
                make_cpupower
                ;;
	    "x86_energy_perf_policy")
		make_x86_energy_perf_policy
		;;
	    "usbip")
		make_usbip
		;;
	    "tmon")
		make_tmon
		;;
	    "cgroup_event_listener")
		make_cgroup_event_listener
		;;
	    "bpf")
		make_bpf
		;;
            "*")
                make -C tools $tool
                ;;
        esac
        if [ $? != 0 ]; then
            echo "build error. $0 script stop"
            exit 255
        fi
    done
fi

install_perf() {
    pushd $src/tools/perf
    make -f Makefile.perf \
	 prefix=/usr \
	 NO_SDT=1 \
	 PYTHON=python \
	 PYTHON_CONFIG=python-config \
	 PERF_VERSION=$vers \
	 DESTDIR=$P \
	 install
    rm -rf $P/etc/bash_completion.d
    find $P/usr/share -type f -exec chmod a-x {} \;
}

if [ $opt_package -eq 1 ] ; then
  check_root
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  for tool in $tools
  do
      case $tool in
	  "perf")
	      install_perf
	      ;;
	  "*")
	      ;;
      esac
  done


################################
#      install tweaks
#  strip binaries, delete locale except ja, compress man,
#  install docs and patches, compress them and  chown root.root
################################
  install_tweak

#############################
#   convert symlink to null file and
#   add "ln -sf" command into install/doinst.sh
################################
  convert_links

  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
