#!/bin/sh
##############################################################
pkgbase="chromium"
vers="88.0.4324.182"
url="https://commondatastorage.googleapis.com/chromium-browser-official/chromium-${vers}.tar.xz"
launcher_vers="7"
launcher_url="https://github.com/foutrelis/chromium-launcher/archive/v${launcher_vers}.tar.gz"
patchset_vers="3"
chromium_patch_url="https://github.com/stha09/chromium-patches/releases/download/chromium-${vers%%.*}-patchset-${patchset_vers}/chromium-${vers%%.*}-patchset-${patchset_vers}.tar.xz"
verify=""
digest=""
arch=`uname -m`
build=B1
src="chromium-${vers}"
OPT_CONFIG="--disable-static --enable-shared"
DOCS="AUTHORS LICENSE LICENSE.chromium_os README.md"
patchfiles="
	subpixel-anti-aliasing-in-FreeType-2.8.1.patch
	patches/chromium-87-openscreen-include.patch
	patches/chromium-88-CompositorFrameReporter-dcheck.patch
	patches/chromium-88-ideographicSpaceCharacter.patch
	patches/chromium-88-AXTreeFormatter-include.patch"
compress=txz
##############################################################

# /etc/sysconfig/google_api_keys に Google から取得した
# $GOOGLE_API_KEY
# $GOOGLE_DEFAULT_CLIENT_ID
# $GOOGLE_DEFAULT_CLIENT_SECRET
# がある場合はそれを使ってビルドする
# 取得は
# https://www.chromium.org/developers/how-tos/api-keys
# 参照。
if [ -f /etc/sysconfig/google_api_keys ]; then
    . /etc/sysconfig/google_api_keys
fi

get_gn_version() {
    chromium_version=$(curl -s https://omahaproxy.appspot.com/linux)
    curl -s https://chromium.googlesource.com/chromium/src/+/refs/tags/$chromium_version/DEPS?format=TEXT \
        | base64 -d | grep -Po "'gn_version': 'git_revision:\K[^']*"
}

build_gn() {
    gn_version=$(get_gn_version)
    echo "*** build gn version $gn_version"

    gn_src=$W/gn
    gn_url="https://gn.googlesource.com/gn/"

    if [ ! -d $W/gn_src ]; then
        git clone $gn_url gn_src
    fi

    cd gn_src
    git checkout master
    git pull origin master
    if git branch | grep build > /dev/null; then
        git branch -D build
    fi
    git checkout -b build $gn_version
    ./build/gen.py
    ninja -C out gn
    if [ $? -eq 0 ]; then
        cp out/gn $W/gn
    else
        echo "gn build error"
        exit 255
    fi
    echo "*** build gn: end"
}

declare -gA _system_libs=(
  [ffmpeg]=ffmpeg
  [flac]=flac
  [fontconfig]=fontconfig
  [freetype]=freetype2
  [harfbuzz-ng]=harfbuzz
  #[icu]=icu
  [libdrm]=
  [libjpeg]=libjpeg
  [libpng]=libpng
  #[libvpx]=libvpx
  #[libwebp]=libwebp
  [libxml]=libxml2
  [libxslt]=libxslt
  [opus]=opus
  #[re2]=re2
  #[snappy]=snappy
  #[zlib]=minizip
)
_unwanted_bundled_libs=(
  $(printf "%s\n" ${!_system_libs[@]} | sed 's/^libjpeg$/&_turbo/')
)

_api_flags=(
    "google_api_key=\"${GOOGLE_API_KEY}\""
    "google_default_client_id=\"${GOOGLE_DEFAULT_CLIENT_ID}\""
    "google_default_client_secret=\"${GOOGLE_DEFAULT_CLIENT_SECRET}\""
)

source /usr/share/plamobuild_functions.sh

# このスクリプトで使う1文字変数の意味
#
# $W : このスクリプトを動かすカレントディレクトリ
# $S : ソースコードのあるディレクトリ(デフォルト: $W/${src})
# $B : ビルド用ディレクトリ(デフォルト: /tmp/build)
# $P : ビルドしたファイルをインストールするディレクトリ（デフォルト: $W/work)

if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
    if [ -d $S ]; then
        rm -rf $S
    fi
    download_sources
    if [ ! -f ${launcher_url##*/} ]; then
        wget $launcher_url
    fi
    rm -rf chromium-launcher-${launcher_vers}
    tar xvf ${launcher_url##*/}
    if [ ! -f ${chromium_patch_url##*/} ]; then
        wget $chromium_patch_url
    fi
    if [ ! -d chromium-patches-chromium-${vers%%.*}-patchset-${patchset_vers} ]; then
        tar xvf ${chromium_patch_url##*/}
    fi
fi

if [ $opt_config -eq 1 ] ; then

    for f in $addfiles $patchfiles
    do
        if [ ! -f $f ]; then
            echo "Required file ($f) is missing."
            exit 255
        fi
    done

    build_gn

######################################################################
#  out of tree build. patch apply in src dir
######################################################################
    cd $S

    sed -i 's/OFFICIAL_BUILD/GOOGLE_CHROME_BUILD/' \
        tools/generate_shim_headers/generate_shim_headers.py

    sed -i -e 's/\<xmlMalloc\>/malloc/' -e 's/\<xmlFree\>/free/' \
        third_party/blink/renderer/core/xml/*.cc \
        third_party/blink/renderer/core/xml/parser/xml_document_parser.cc \
        third_party/libxml/chromium/*.cc

    for patch in $patchfiles ; do
        if [ ! -f .$(basename ${patch}) ]; then
            echo "=== patching $patch ==="
            patch -p1 < $W/$patch
            touch .$(basename ${patch})
        fi
    done

    sed -i '1s|python$|&2|' third_party/dom_distiller_js/protoc_plugins/*.py

    # for running ui/gfx/x/gen_xproto.py, we use python3 xcbgen module from python2
    ln -sf /usr/lib/python3.7/site-packages/xcbgen $W/

    mkdir -p third_party/node/linux/node-linux-x64/bin
    ln -sfv /usr/bin/node third_party/node/linux/node-linux-x64/bin/

    for _lib in ${_unwanted_bundled_libs[@]}; do
        find "third_party/$_lib" -type f \
             \! -path "third_party/$_lib/chromium/*" \
             \! -path "third_party/$_lib/google/*" \
             \! -path "third_party/harfbuzz-ng/utils/hb_scoped.h" \
             \! -regex '.*\.\(gn\|gni\|isolate\)' \
             -delete
    done

    python2 build/linux/unbundle/replace_gn_files.py \
        --system-libraries "${!_system_libs[@]}"
fi

if [ $opt_build -eq 1 ] ; then

    echo "*** Build chromium"
    cd $S
    #ninja -v -C out/Release -t clean
    export CC=clang
    export CXX=clang++
    export AR=llvm-ar
    export NM=nm

    export CFLAGS+='   -Wno-builtin-macro-redefined -Wno-unknown-warning-option'
    export CXXFLAGS+=' -Wno-builtin-macro-redefined -Wno-unknown-warning-option'
    export CPPFLAGS+=' -D__DATE__=  -D__TIME__=  -D__TIMESTAMP__='

    # copy GN flags file and tweak GN flags
    mkdir -v -p out/Release
    cp -v $W/flags.gn out/Release/args.gn
    for flag in ${_api_flags[@]}
    do
        if [ -n $flag ]; then
            echo $flag >> out/Release/args.gn
        fi
    done

    $W/gn gen out/Release --script-executable=/usr/bin/python2
    #ninja -v -C out/Release chrome chrome_sandbox chromedriver
    ninja -C out/Release chrome chrome_sandbox chromedriver

    cd $W
    echo "*** Build chromium launcher"
    make -C chromium-launcher-${launcher_vers}
fi

if [ $opt_package -eq 1 ] ; then
  check_root
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P

  echo "*** Installing chromium-launcher"
  cd chromium-launcher-${launcher_vers}
  make PREFIX=/usr DESTDIR=$P install

  echo "*** Installing a wrapper script for chromium-launcher of Plamo"
  ( cd $P/usr/bin && mv -v chromium chromium-bin )
  install -Dm755 -v $W/chromium.sh $P/usr/bin/chromium
  install -Dm644 -v $W/chromium.sh $docdir/$src/chromium.sh

  echo "*** Installing chromium"
  cd $S

  OUTDIR="out/Release"
  INSTALLDIR="/usr/lib/chromium"

  install -Dm755 -v $OUTDIR/chrome $P/$INSTALLDIR/chromium
  install -Dm4755 -v $OUTDIR/chrome $P/$INSTALLDIR/chrome-sandbox
  install -d -v $P/usr/bin


  install -Dm644 -v chrome/installer/linux/common/desktop.template \
          $P/usr/share/applications/chromium.desktop
  install -Dm644 -v chrome/app/resources/manpage.1.in \
          $P/usr/share/man/man1/chromium.1

  sed -i \
      -e "s/@@MENUNAME@@/Chromium/g" \
      -e "s/@@PACKAGE@@/chromium/g" \
      -e "s/@@USR_BIN_SYMLINK_NAME@@/chromium/g" \
      "$P/usr/share/applications/chromium.desktop" \
      "$P/usr/share/man/man1/chromium.1"

  cp out/Release/{chrome_{100,200}_percent,resources}.pak \
     out/Release/{*.bin,chromedriver} \
     "$P/$INSTALLDIR"
  install -Dm644 -t "$P/$INSTALLDIR/locales" out/Release/locales/*.pak
  ln -sfv $INSTALLDIR/chromedriver $P/usr/bin/chromedriver

  if [[ -z ${_system_libs[icu]+set} ]]; then
      cp -v out/Release/icudtl.dat "$P/$INSTALLDIR"
  fi

  for size in 22 24 48 64 128 256; do
      install -Dm644 -v "chrome/app/theme/chromium/product_logo_$size.png" \
              "$P/usr/share/icons/hicolor/${size}x${size}/apps/chromium.png"
  done

  for size in 16 32; do
      install -Dm644 -v "chrome/app/theme/default_100_percent/chromium/product_logo_$size.png" \
              "$P/usr/share/icons/hicolor/${size}x${size}/apps/chromium.png"
  done

  mkdir -p $docdir/$src/chromium-patches-chromium-${vers%%.*}-patchset-${patchset_vers}

################################
#      install tweaks
#  strip binaries, delete locale except ja, compress man,
#  install docs and patches, compress them and  chown root.root
################################
  install_tweak

#############################
#   convert symlink to null file and
#   add "ln -sf" command into install/doinst.sh
################################
  convert_links

  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
