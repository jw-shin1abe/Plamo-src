#!/bin/sh
##############################################################
pkgbase='bluez'
vers='5.60'
url="https://www.kernel.org/pub/linux/bluetooth/${pkgbase}-${vers}.tar.xz"
verify="https://www.kernel.org/pub/linux/bluetooth/bluez-${vers}.tar.sign"
arch=`uname -m`
build=B1
src="${pkgbase}-${vers}"
OPT_CONFIG="--enable-library --disable-systemd --enable-btpclient --enable-hid2hci --enable-experimental --disable-manpages"
DOCS='AUTHORS COPYING COPYING.LIB ChangeLog INSTALL NEWS README TODO'
# from arch linux
patchfiles=""
addfiles="bluetooth.config bluetooth.init btusb.conf"
compress=txz
##############################################################

source /usr/share/plamobuild_functions.sh

# このスクリプトで使う1文字変数の意味
#
# $W : このスクリプトを動かすカレントディレクトリ
# $S : ソースコードのあるディレクトリ(デフォルト: $W/${src})
# $B : ビルド用ディレクトリ(デフォルト: /tmp/build{,32})
# $P : ビルドしたファイルをインストールするディレクトリ（デフォルト: $W/work)


if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
  download_sources
  if [ ! -f ${blfs_patch##*/} ]; then
    wget $blfs_patch
  fi
fi

if [ $opt_config -eq 1 ] ; then

  for f in $addfiles $patchfiles
  do
    if [ ! -f $f ]; then
      echo "Required file ($f) is missing."
      exit 255
    fi
  done

  if [ -d $B ] ; then rm -rf $B ; fi ; cp -a $S $B
######################################################################
#  don't copy sources, so need patch in the src dir
######################################################################
  cd $B
  for patch in $patchfiles ; do
    patch -p1 < $W/$patch
  done
  # if [ -f autogen.sh ] ; then
  #   sh ./autogen.sh
  # fi
  #autoreconf -ivf

  export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig:/opt/kde/${libdir}/pkgconfig
  export LDFLAGS='-Wl,--as-needed' 
  ./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var --mandir='${prefix}'/share/man ${OPT_CONFIG}

  if [ $? != 0 ]; then
    echo "configure error. $0 script stop"
    exit 255
  fi
fi

if [ $opt_build -eq 1 ] ; then
  cd $B
  export LDFLAGS='-Wl,--as-needed'
  make -j3
  if [ $? != 0 ]; then
    echo "build error. $0 script stop"
    exit 255
  fi
fi

if [ $opt_package -eq 1 ] ; then
  check_root
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  cd $B
  export LDFLAGS='-Wl,--as-needed'
  make install DESTDIR=$P

  install -dm755 -v $P/usr/sbin
  ln -svf ../libexec/bluetooth/bluetoothd $P/usr/sbin/bluetoothd

  for f in $(find tools/ -type f -perm -755)
  do
      filename=$(basename $f)
      install -Dm755 $B/tools/$filename $P/usr/bin/$filename
  done

  # conf
  install -Dm644 -v $S/src/main.conf $P/etc/bluetooth/main.conf
  install -Dm644 -v $W/btusb.conf $P/etc/modprobe.d/btusb.conf
  install -Dm644 -v $W/btusb.conf $docdir/$src/btusb.conf

  install -dm755 -v $docdir/$src
  install -m644  -v $S/doc/*.txt $docdir/$src/

  # init script
  install -Dm644 -v $W/bluetooth.init $P/etc/rc.d/init.d/bluetooth
  install -Dm644 -v $W/bluetooth.init $docdir/$src/bluetooth.init
  for i in $(seq 0 6)
  do
    install -dm755 -v $P/etc/rc.d/rc"$i".d
    case $i in
      0|1|2|6)
        ln -sfv ../init.d/bluetooth $P/etc/rc.d/rc"$i".d/K27bluetooth
        ;;
      3|4|5)
        ln -sfv ../init.d/bluetooth $P/etc/rc.d/rc"$i".d/S35bluetooth
        ;;
    esac
  done

  # sysconfig file
  install -Dm755 -v $W/bluetooth.config $P/etc/sysconfig/bluetooth
  install -Dm755 -v $W/bluetooth.config $docdir/$src/bluetooth.config

  # create empty files
  cat > $P/etc/bluetooth/rfcomm.conf <<"EOF"
# Start rfcomm.conf
# Set up the RFCOMM configuration of the Bluetooth subsystem in the Linux kernel.
# Use one line per command
# See the rfcomm man page for options


# End of rfcomm.conf
EOF

  cat > $P/etc/bluetooth/uart.conf <<"EOF"
# Start uart.conf
# Attach serial devices via UART HCI to BlueZ stack
# Use one line per device
# See the hciattach man page for options

# End of uart.conf
EOF

################################
#      install tweaks
#  strip binaries, delete locale except ja, compress man, 
#  install docs and patches, compress them and  chown root.root
################################
  install_tweak

#############################
#   convert symlink to null file and 
#   add "ln -sf" command into install/doinst.sh
################################
  convert_links

  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
